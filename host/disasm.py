#
# disasm.py - part of CWDebug, a source-level debugger for the AmigaOS
#            This file contains the disassembler routines / classes. The code is derived from https://github.com/jefftranter/68000/tree/master/toolchain/disasm.
#
# Copyright(C) 2018-2021 Constantin Wiemer


import struct

from dataclasses import dataclass
from loguru import logger


@dataclass
class Instruction:
    in_mnemonic: str
    in_bit_mask: int
    in_value_to_match: int
    in_ea_mask: int
    in_format_str: str
    in_args: tuple


# TODO: implement helper functions and lookup tables like get_ea_mode_str_* and 3bit_qdata_table
_instruction_table = [
    Instruction('m68000_illegal', 0xffff, 0x4afc, 0x0, 'dc.w ${:04x}; ILLEGAL', (lambda op: op, )),
    Instruction('m68000_1010', 0xf000, 0xa000, 0x0, 'dc.w    ${:04x}; opcode 1010', (lambda op: op, )),
    Instruction('m68000_1111', 0xf000, 0xf000, 0x0, 'dc.w    ${:04x}; opcode 1111', (lambda op: op, )),
    Instruction('m68000_abcd_rr', 0xf1f8, 0xc100, 0x0, 'abcd    D{:d}, D{:d}', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_abcd_mm', 0xf1f8, 0xc108, 0x0, 'abcd    -(A{:d}), -(A{:d})', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_add_er_8', 0xf1c0, 0xd000, 0xbff, 'add.b   {:s}, D{:d}', (lambda op: get_ea_mode_str_8(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_add_er_16', 0xf1c0, 0xd040, 0xfff, 'add.w   {:s}, D{:d}', (lambda op: get_ea_mode_str_16(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_add_er_32', 0xf1c0, 0xd080, 0xfff, 'add.l   {:s}, D{:d}', (lambda op: get_ea_mode_str_32(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_add_re_8', 0xf1c0, 0xd100, 0x3f8, 'add.b   D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_add_re_16', 0xf1c0, 0xd140, 0x3f8, 'add.w   D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_add_re_32', 0xf1c0, 0xd180, 0x3f8, 'add.l   D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_adda_16', 0xf1c0, 0xd0c0, 0xfff, 'adda.w  {:s}, A{:d}', (lambda op: get_ea_mode_str_16(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_adda_32', 0xf1c0, 0xd1c0, 0xfff, 'adda.l  {:s}, A{:d}', (lambda op: get_ea_mode_str_32(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_addq_8', 0xf1c0, 0x5000, 0xbf8, 'addq.b  #{:d}, {:s}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_addq_16', 0xf1c0, 0x5040, 0xff8, 'addq.w  #{:d}, {:s}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_addq_32', 0xf1c0, 0x5080, 0xff8, 'addq.l  #{:d}, {:s}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_addx_rr_8', 0xf1f8, 0xd100, 0x0, 'addx.b  D{:d}, D{:d}', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_addx_rr_16', 0xf1f8, 0xd140, 0x0, 'addx.w  D{:d}, D{:d}', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_addx_rr_32', 0xf1f8, 0xd180, 0x0, 'addx.l  D{:d}, D{:d}', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_addx_mm_8', 0xf1f8, 0xd108, 0x0, 'addx.b  -(A{:d}), -(A{:d})', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_addx_mm_16', 0xf1f8, 0xd148, 0x0, 'addx.w  -(A{:d}), -(A{:d})', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_addx_mm_32', 0xf1f8, 0xd188, 0x0, 'addx.l  -(A{:d}), -(A{:d})', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_and_er_8', 0xf1c0, 0xc000, 0xbff, 'and.b   {:s}, D{:d}', (lambda op: get_ea_mode_str_8(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_and_er_16', 0xf1c0, 0xc040, 0xbff, 'and.w   {:s}, D{:d}', (lambda op: get_ea_mode_str_16(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_and_er_32', 0xf1c0, 0xc080, 0xbff, 'and.l   {:s}, D{:d}', (lambda op: get_ea_mode_str_32(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_and_re_8', 0xf1c0, 0xc100, 0x3f8, 'and.b   D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_and_re_16', 0xf1c0, 0xc140, 0x3f8, 'and.w   D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_and_re_32', 0xf1c0, 0xc180, 0x3f8, 'and.l   D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_andi_to_ccr', 0xffff, 0x23c, 0x0, 'andi    {:s}, CCR', (lambda op: get_imm_str_u8(), )),
    Instruction('m68000_andi_to_sr', 0xffff, 0x27c, 0x0, 'andi    {:s}, SR', (lambda op: get_imm_str_u16(), )),
    Instruction('m68000_asr_s_8', 0xf1f8, 0xe000, 0x0, 'asr.b   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_asr_s_16', 0xf1f8, 0xe040, 0x0, 'asr.w   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_asr_s_32', 0xf1f8, 0xe080, 0x0, 'asr.l   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_asr_r_8', 0xf1f8, 0xe020, 0x0, 'asr.b   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_asr_r_16', 0xf1f8, 0xe060, 0x0, 'asr.w   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_asr_r_32', 0xf1f8, 0xe0a0, 0x0, 'asr.l   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_asr_ea', 0xffc0, 0xe0c0, 0x3f8, 'asr.w   {:s}', (lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_asl_s_8', 0xf1f8, 0xe100, 0x0, 'asl.b   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_asl_s_16', 0xf1f8, 0xe140, 0x0, 'asl.w   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_asl_s_32', 0xf1f8, 0xe180, 0x0, 'asl.l   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_asl_r_8', 0xf1f8, 0xe120, 0x0, 'asl.b   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_asl_r_16', 0xf1f8, 0xe160, 0x0, 'asl.w   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_asl_r_32', 0xf1f8, 0xe1a0, 0x0, 'asl.l   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_asl_ea', 0xffc0, 0xe1c0, 0x3f8, 'asl.w   {:s}', (lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_bchg_r', 0xf1c0, 0x140, 0xbf8, 'bchg    D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_bclr_r', 0xf1c0, 0x180, 0xbf8, 'bclr    D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68010_bkpt', 0xfff8, 0x4848, 0x0, 'bkpt #{:d}; (1+)', (lambda op: op&7, )),
    Instruction('m68000_bset_r', 0xf1c0, 0x1c0, 0xbf8, 'bset    D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_btst_r', 0xf1c0, 0x100, 0xbff, 'btst    D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_chk_16', 0xf1c0, 0x4180, 0xbff, 'chk.w   {:s}, D{:d}', (lambda op: get_ea_mode_str_16(op), lambda op: (op>>9)&7, )),
    Instruction('m68020_chk_32', 0xf1c0, 0x4100, 0xbff, 'chk.l   {:s}, D{:d}; (2+)', (lambda op: get_ea_mode_str_32(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_clr_8', 0xffc0, 0x4200, 0xbf8, 'clr.b   {:s}', (lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_clr_16', 0xffc0, 0x4240, 0xbf8, 'clr.w   {:s}', (lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_clr_32', 0xffc0, 0x4280, 0xbf8, 'clr.l   {:s}', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_cmp_8', 0xf1c0, 0xb000, 0xbff, 'cmp.b   {:s}, D{:d}', (lambda op: get_ea_mode_str_8(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_cmp_16', 0xf1c0, 0xb040, 0xfff, 'cmp.w   {:s}, D{:d}', (lambda op: get_ea_mode_str_16(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_cmp_32', 0xf1c0, 0xb080, 0xfff, 'cmp.l   {:s}, D{:d}', (lambda op: get_ea_mode_str_32(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_cmpa_16', 0xf1c0, 0xb0c0, 0xfff, 'cmpa.w  {:s}, A{:d}', (lambda op: get_ea_mode_str_16(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_cmpa_32', 0xf1c0, 0xb1c0, 0xfff, 'cmpa.l  {:s}, A{:d}', (lambda op: get_ea_mode_str_32(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_cmpm_8', 0xf1f8, 0xb108, 0x0, 'cmpm.b  (A{:d})+, (A{:d})+', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_cmpm_16', 0xf1f8, 0xb148, 0x0, 'cmpm.w  (A{:d})+, (A{:d})+', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_cmpm_32', 0xf1f8, 0xb188, 0x0, 'cmpm.l  (A{:d})+, (A{:d})+', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68020_cpgen', 0xf1c0, 0xf000, 0x0, '{:d}gen    {:s}; (2-3)', (lambda op: (op>>9)&7, lambda op: get_imm_str_u32(), )),
    Instruction('m68020_cprestore', 0xf1c0, 0xf140, 0x37f, '{:d}restore {:s}; (2-3)', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68020_cpsave', 0xf1c0, 0xf100, 0x2f8, '{:d}save   {:s}; (2-3)', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_divs', 0xf1c0, 0x81c0, 0xbff, 'divs.w  {:s}, D{:d}', (lambda op: get_ea_mode_str_16(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_divu', 0xf1c0, 0x80c0, 0xbff, 'divu.w  {:s}, D{:d}', (lambda op: get_ea_mode_str_16(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_eor_8', 0xf1c0, 0xb100, 0xbf8, 'eor.b   D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_eor_16', 0xf1c0, 0xb140, 0xbf8, 'eor.w   D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_eor_32', 0xf1c0, 0xb180, 0xbf8, 'eor.l   D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_eori_to_ccr', 0xffff, 0xa3c, 0x0, 'eori    {:s}, CCR', (lambda op: get_imm_str_u8(), )),
    Instruction('m68000_eori_to_sr', 0xffff, 0xa7c, 0x0, 'eori    {:s}, SR', (lambda op: get_imm_str_u16(), )),
    Instruction('m68000_exg_dd', 0xf1f8, 0xc140, 0x0, 'exg     D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_exg_aa', 0xf1f8, 0xc148, 0x0, 'exg     A{:d}, A{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_exg_da', 0xf1f8, 0xc188, 0x0, 'exg     D{:d}, A{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_ext_16', 0xfff8, 0x4880, 0x0, 'ext.w   D{:d}', (lambda op: op&7, )),
    Instruction('m68000_ext_32', 0xfff8, 0x48c0, 0x0, 'ext.l   D{:d}', (lambda op: op&7, )),
    Instruction('m68020_extb_32', 0xfff8, 0x49c0, 0x0, 'extb.l  D{:d}; (2+)', (lambda op: op&7, )),
    Instruction('m68000_jmp', 0xffc0, 0x4ec0, 0x27b, 'jmp     {:s}', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_jsr', 0xffc0, 0x4e80, 0x27b, 'jsr     {:s}', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_lea', 0xf1c0, 0x41c0, 0x27b, 'lea     {:s}, A{:d}', (lambda op: get_ea_mode_str_32(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_link_16', 0xfff8, 0x4e50, 0x0, 'link    A{:d}, {:s}', (lambda op: op&7, lambda op: get_imm_str_s16(), )),
    Instruction('m68020_link_32', 0xfff8, 0x4808, 0x0, 'link    A{:d}, {:s}; (2+)', (lambda op: op&7, lambda op: get_imm_str_s32(), )),
    Instruction('m68000_lsr_s_8', 0xf1f8, 0xe008, 0x0, 'lsr.b   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_lsr_s_16', 0xf1f8, 0xe048, 0x0, 'lsr.w   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_lsr_s_32', 0xf1f8, 0xe088, 0x0, 'lsr.l   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_lsr_r_8', 0xf1f8, 0xe028, 0x0, 'lsr.b   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_lsr_r_16', 0xf1f8, 0xe068, 0x0, 'lsr.w   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_lsr_r_32', 0xf1f8, 0xe0a8, 0x0, 'lsr.l   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_lsr_ea', 0xffc0, 0xe2c0, 0x3f8, 'lsr.w   {:s}', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_lsl_s_8', 0xf1f8, 0xe108, 0x0, 'lsl.b   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_lsl_s_16', 0xf1f8, 0xe148, 0x0, 'lsl.w   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_lsl_s_32', 0xf1f8, 0xe188, 0x0, 'lsl.l   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_lsl_r_8', 0xf1f8, 0xe128, 0x0, 'lsl.b   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_lsl_r_16', 0xf1f8, 0xe168, 0x0, 'lsl.w   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_lsl_r_32', 0xf1f8, 0xe1a8, 0x0, 'lsl.l   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_lsl_ea', 0xffc0, 0xe3c0, 0x3f8, 'lsl.w   {:s}', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_movea_16', 0xf1c0, 0x3040, 0xfff, 'movea.w {:s}, A{:d}', (lambda op: get_ea_mode_str_16(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_movea_32', 0xf1c0, 0x2040, 0xfff, 'movea.l {:s}, A{:d}', (lambda op: get_ea_mode_str_32(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_move_to_ccr', 0xffc0, 0x44c0, 0xbff, 'move    {:s}, CCR', (lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68010_move_fr_ccr', 0xffc0, 0x42c0, 0xbf8, 'move    CCR, {:s}; (1+)', (lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_move_fr_sr', 0xffc0, 0x40c0, 0xbf8, 'move    SR, {:s}', (lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_move_to_sr', 0xffc0, 0x46c0, 0xbff, 'move    {:s}, SR', (lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_move_fr_usp', 0xfff8, 0x4e68, 0x0, 'move    USP, A{:d}', (lambda op: op&7, )),
    Instruction('m68000_move_to_usp', 0xfff8, 0x4e60, 0x0, 'move    A{:d}, USP', (lambda op: op&7, )),
    Instruction('m68000_movep_re_16', 0xf1f8, 0x188, 0x0, 'movep.w D{:d}, (${:x},A{:d})', (lambda op: (op>>9)&7, lambda op: read_imm_16(), lambda op: op&7, )),
    Instruction('m68000_movep_re_32', 0xf1f8, 0x1c8, 0x0, 'movep.l D{:d}, (${:x},A{:d})', (lambda op: (op>>9)&7, lambda op: read_imm_16(), lambda op: op&7, )),
    Instruction('m68000_movep_er_16', 0xf1f8, 0x108, 0x0, 'movep.w (${:x},A{:d}), D{:d}', (lambda op: read_imm_16(), lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_movep_er_32', 0xf1f8, 0x148, 0x0, 'movep.l (${:x},A{:d}), D{:d}', (lambda op: read_imm_16(), lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_moveq', 0xf100, 0x7000, 0x0, 'moveq   #{:s}, D{:d}', (lambda op: make_signed_hex_str_8(op), lambda op: (op>>9)&7, )),
    Instruction('m68040_move16_pi_pi', 0xfff8, 0xf620, 0x0, 'move16  (A{:d})+, (A{:d})+; (4)', (lambda op: op&7, lambda op: (read_imm_16()>>12)&7, )),
    Instruction('m68040_move16_pi_al', 0xfff8, 0xf600, 0x0, 'move16  (A{:d})+, {:s}; (4)', (lambda op: op&7, lambda op: get_imm_str_u32(), )),
    Instruction('m68040_move16_al_pi', 0xfff8, 0xf608, 0x0, 'move16  {:s}, (A{:d})+; (4)', (lambda op: get_imm_str_u32(), lambda op: op&7, )),
    Instruction('m68040_move16_ai_al', 0xfff8, 0xf610, 0x0, 'move16  (A{:d}), {:s}; (4)', (lambda op: op&7, lambda op: get_imm_str_u32(), )),
    Instruction('m68040_move16_al_ai', 0xfff8, 0xf618, 0x0, 'move16  {:s}, (A{:d}); (4)', (lambda op: get_imm_str_u32(), lambda op: op&7, )),
    Instruction('m68000_muls', 0xf1c0, 0xc1c0, 0xbff, 'muls.w  {:s}, D{:d}', (lambda op: get_ea_mode_str_16(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_mulu', 0xf1c0, 0xc0c0, 0xbff, 'mulu.w  {:s}, D{:d}', (lambda op: get_ea_mode_str_16(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_nbcd', 0xffc0, 0x4800, 0xbf8, 'nbcd    {:s}', (lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_neg_8', 0xffc0, 0x4400, 0xbf8, 'neg.b   {:s}', (lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_neg_16', 0xffc0, 0x4440, 0xbf8, 'neg.w   {:s}', (lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_neg_32', 0xffc0, 0x4480, 0xbf8, 'neg.l   {:s}', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_negx_8', 0xffc0, 0x4000, 0xbf8, 'negx.b  {:s}', (lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_negx_16', 0xffc0, 0x4040, 0xbf8, 'negx.w  {:s}', (lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_negx_32', 0xffc0, 0x4080, 0xbf8, 'negx.l  {:s}', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_nop', 0xffff, 0x4e71, 0x0, 'nop', ()),
    Instruction('m68000_not_8', 0xffc0, 0x4600, 0xbf8, 'not.b   {:s}', (lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_not_16', 0xffc0, 0x4640, 0xbf8, 'not.w   {:s}', (lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_not_32', 0xffc0, 0x4680, 0xbf8, 'not.l   {:s}', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_or_er_8', 0xf1c0, 0x8000, 0xbff, 'or.b    {:s}, D{:d}', (lambda op: get_ea_mode_str_8(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_or_er_16', 0xf1c0, 0x8040, 0xbff, 'or.w    {:s}, D{:d}', (lambda op: get_ea_mode_str_16(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_or_er_32', 0xf1c0, 0x8080, 0xbff, 'or.l    {:s}, D{:d}', (lambda op: get_ea_mode_str_32(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_or_re_8', 0xf1c0, 0x8100, 0x3f8, 'or.b    D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_or_re_16', 0xf1c0, 0x8140, 0x3f8, 'or.w    D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_or_re_32', 0xf1c0, 0x8180, 0x3f8, 'or.l    D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_ori_to_ccr', 0xffff, 0x3c, 0x0, 'ori     {:s}, CCR', (lambda op: get_imm_str_u8(), )),
    Instruction('m68000_ori_to_sr', 0xffff, 0x7c, 0x0, 'ori     {:s}, SR', (lambda op: get_imm_str_u16(), )),
    Instruction('m68020_pack_rr', 0xf1f8, 0x8140, 0x0, 'pack    D{:d}, D{:d}, {:s}; (2+)', (lambda op: op&7, lambda op: (op>>9)&7, lambda op: get_imm_str_u16(), )),
    Instruction('m68020_pack_mm', 0xf1f8, 0x8148, 0x0, 'pack    -(A{:d}), -(A{:d}), {:s}; (2+)', (lambda op: op&7, lambda op: (op>>9)&7, lambda op: get_imm_str_u16(), )),
    Instruction('m68000_pea', 0xffc0, 0x4840, 0x27b, 'pea     {:s}', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_reset', 0xffff, 0x4e70, 0x0, 'reset', ()),
    Instruction('m68000_ror_s_8', 0xf1f8, 0xe018, 0x0, 'ror.b   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_ror_s_16', 0xf1f8, 0xe058, 0x0, 'ror.w   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_ror_s_32', 0xf1f8, 0xe098, 0x0, 'ror.l   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_ror_r_8', 0xf1f8, 0xe038, 0x0, 'ror.b   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_ror_r_16', 0xf1f8, 0xe078, 0x0, 'ror.w   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_ror_r_32', 0xf1f8, 0xe0b8, 0x0, 'ror.l   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_ror_ea', 0xffc0, 0xe6c0, 0x3f8, 'ror.w   {:s}', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_rol_s_8', 0xf1f8, 0xe118, 0x0, 'rol.b   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_rol_s_16', 0xf1f8, 0xe158, 0x0, 'rol.w   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_rol_s_32', 0xf1f8, 0xe198, 0x0, 'rol.l   #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_rol_r_8', 0xf1f8, 0xe138, 0x0, 'rol.b   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_rol_r_16', 0xf1f8, 0xe178, 0x0, 'rol.w   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_rol_r_32', 0xf1f8, 0xe1b8, 0x0, 'rol.l   D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_rol_ea', 0xffc0, 0xe7c0, 0x3f8, 'rol.w   {:s}', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_roxr_s_8', 0xf1f8, 0xe010, 0x0, 'roxr.b  #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_roxr_s_16', 0xf1f8, 0xe050, 0x0, 'roxr.w  #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_roxr_s_32', 0xf1f8, 0xe090, 0x0, 'roxr.l  #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_roxr_r_8', 0xf1f8, 0xe030, 0x0, 'roxr.b  D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_roxr_r_16', 0xf1f8, 0xe070, 0x0, 'roxr.w  D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_roxr_r_32', 0xf1f8, 0xe0b0, 0x0, 'roxr.l  D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_roxr_ea', 0xffc0, 0xe4c0, 0x3f8, 'roxr.w  {:s}', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_roxl_s_8', 0xf1f8, 0xe110, 0x0, 'roxl.b  #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_roxl_s_16', 0xf1f8, 0xe150, 0x0, 'roxl.w  #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_roxl_s_32', 0xf1f8, 0xe190, 0x0, 'roxl.l  #{:d}, D{:d}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: op&7, )),
    Instruction('m68000_roxl_r_8', 0xf1f8, 0xe130, 0x0, 'roxl.b  D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_roxl_r_16', 0xf1f8, 0xe170, 0x0, 'roxl.w  D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_roxl_r_32', 0xf1f8, 0xe1b0, 0x0, 'roxl.l  D{:d}, D{:d}', (lambda op: (op>>9)&7, lambda op: op&7, )),
    Instruction('m68000_roxl_ea', 0xffc0, 0xe5c0, 0x3f8, 'roxl.w  {:s}', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68010_rtd', 0xffff, 0x4e74, 0x0, 'rtd     {:s}; (1+)', (lambda op: get_imm_str_s16(), )),
    Instruction('m68000_rte', 0xffff, 0x4e73, 0x0, 'rte', ()),
#    Instruction('m68020_rtm', 0xfff0, 0x6c0, 0x0, 'rtm     %c{:d}; (2+)', (lambda op: BIT_3(op)?'A':'D', lambda op: op&7, )),
    Instruction('m68000_rtr', 0xffff, 0x4e77, 0x0, 'rtr', ()),
    Instruction('m68000_rts', 0xffff, 0x4e75, 0x0, 'rts', ()),
    Instruction('m68000_sbcd_rr', 0xf1f8, 0x8100, 0x0, 'sbcd    D{:d}, D{:d}', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_sbcd_mm', 0xf1f8, 0x8108, 0x0, 'sbcd    -(A{:d}), -(A{:d})', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_scc', 0xf0c0, 0x50c0, 0xbf8, 's{:-2s}     {:s}', (lambda op: g_cc[(op>>8)&0xf], lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_stop', 0xffff, 0x4e72, 0x0, 'stop    {:s}', (lambda op: get_imm_str_s16(), )),
    Instruction('m68000_sub_er_8', 0xf1c0, 0x9000, 0xbff, 'sub.b   {:s}, D{:d}', (lambda op: get_ea_mode_str_8(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_sub_er_16', 0xf1c0, 0x9040, 0xfff, 'sub.w   {:s}, D{:d}', (lambda op: get_ea_mode_str_16(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_sub_er_32', 0xf1c0, 0x9080, 0xfff, 'sub.l   {:s}, D{:d}', (lambda op: get_ea_mode_str_32(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_sub_re_8', 0xf1c0, 0x9100, 0x3f8, 'sub.b   D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_sub_re_16', 0xf1c0, 0x9140, 0x3f8, 'sub.w   D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_sub_re_32', 0xf1c0, 0x9180, 0x3f8, 'sub.l   D{:d}, {:s}', (lambda op: (op>>9)&7, lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_suba_16', 0xf1c0, 0x90c0, 0xfff, 'suba.w  {:s}, A{:d}', (lambda op: get_ea_mode_str_16(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_suba_32', 0xf1c0, 0x91c0, 0xfff, 'suba.l  {:s}, A{:d}', (lambda op: get_ea_mode_str_32(op), lambda op: (op>>9)&7, )),
    Instruction('m68000_subq_8', 0xf1c0, 0x5100, 0xbf8, 'subq.b  #{:d}, {:s}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_subq_16', 0xf1c0, 0x5140, 0xff8, 'subq.w  #{:d}, {:s}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_subq_32', 0xf1c0, 0x5180, 0xff8, 'subq.l  #{:d}, {:s}', (lambda op: g_3bit_qdata_table[(op>>9)&7], lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_subx_rr_8', 0xf1f8, 0x9100, 0x0, 'subx.b  D{:d}, D{:d}', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_subx_rr_16', 0xf1f8, 0x9140, 0x0, 'subx.w  D{:d}, D{:d}', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_subx_rr_32', 0xf1f8, 0x9180, 0x0, 'subx.l  D{:d}, D{:d}', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_subx_mm_8', 0xf1f8, 0x9108, 0x0, 'subx.b  -(A{:d}), -(A{:d})', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_subx_mm_16', 0xf1f8, 0x9148, 0x0, 'subx.w  -(A{:d}), -(A{:d})', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_subx_mm_32', 0xf1f8, 0x9188, 0x0, 'subx.l  -(A{:d}), -(A{:d})', (lambda op: op&7, lambda op: (op>>9)&7, )),
    Instruction('m68000_swap', 0xfff8, 0x4840, 0x0, 'swap    D{:d}', (lambda op: op&7, )),
    Instruction('m68000_tas', 0xffc0, 0x4ac0, 0xbf8, 'tas     {:s}', (lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_trap', 0xfff0, 0x4e40, 0x0, 'trap    #${:x}', (lambda op: op&0xf, )),
    Instruction('m68020_trapcc_0', 0xf0ff, 0x50fc, 0x0, 'trap{:-2s}; (2+)', (lambda op: g_cc[(op>>8)&0xf], )),
    Instruction('m68020_trapcc_16', 0xf0ff, 0x50fa, 0x0, 'trap{:-2s}  {:s}; (2+)', (lambda op: g_cc[(op>>8)&0xf], lambda op: get_imm_str_u16(), )),
    Instruction('m68020_trapcc_32', 0xf0ff, 0x50fb, 0x0, 'trap{:-2s}  {:s}; (2+)', (lambda op: g_cc[(op>>8)&0xf], lambda op: get_imm_str_u32(), )),
    Instruction('m68000_trapv', 0xffff, 0x4e76, 0x0, 'trapv', ()),
    Instruction('m68000_tst_8', 0xffc0, 0x4a00, 0xbf8, 'tst.b   {:s}', (lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68020_tst_pcdi_8', 0xffff, 0x4a3a, 0x0, 'tst.b   {:s}; (2+)', (lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68020_tst_pcix_8', 0xffff, 0x4a3b, 0x0, 'tst.b   {:s}; (2+)', (lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68020_tst_i_8', 0xffff, 0x4a3c, 0x0, 'tst.b   {:s}; (2+)', (lambda op: get_ea_mode_str_8(op), )),
    Instruction('m68000_tst_16', 0xffc0, 0x4a40, 0xbf8, 'tst.w   {:s}', (lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68020_tst_a_16', 0xfff8, 0x4a48, 0x0, 'tst.w   {:s}; (2+)', (lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68020_tst_pcdi_16', 0xffff, 0x4a7a, 0x0, 'tst.w   {:s}; (2+)', (lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68020_tst_pcix_16', 0xffff, 0x4a7b, 0x0, 'tst.w   {:s}; (2+)', (lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68020_tst_i_16', 0xffff, 0x4a7c, 0x0, 'tst.w   {:s}; (2+)', (lambda op: get_ea_mode_str_16(op), )),
    Instruction('m68000_tst_32', 0xffc0, 0x4a80, 0xbf8, 'tst.l   {:s}', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68020_tst_a_32', 0xfff8, 0x4a88, 0x0, 'tst.l   {:s}; (2+)', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68020_tst_pcdi_32', 0xffff, 0x4aba, 0x0, 'tst.l   {:s}; (2+)', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68020_tst_pcix_32', 0xffff, 0x4abb, 0x0, 'tst.l   {:s}; (2+)', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68020_tst_i_32', 0xffff, 0x4abc, 0x0, 'tst.l   {:s}; (2+)', (lambda op: get_ea_mode_str_32(op), )),
    Instruction('m68000_unlk', 0xfff8, 0x4e58, 0x0, 'unlk    A{:d}', (lambda op: op&7, )),
    Instruction('m68020_unpk_rr', 0xf1f8, 0x8180, 0x0, 'unpk    D{:d}, D{:d}, {:s}; (2+)', (lambda op: op&7, lambda op: (op>>9)&7, lambda op: get_imm_str_u16(), )),
    Instruction('m68020_unpk_mm', 0xf1f8, 0x8188, 0x0, 'unpk    -(A{:d}), -(A{:d}), {:s}; (2+)', (lambda op: op&7, lambda op: (op>>9)&7, lambda op: get_imm_str_u16(), )),
]


def disassemble(instr_address: int, instr_bytes: bytes) -> str:
    opcode = struct.unpack('>H', instr_bytes[0:2])[0]
    for instr in _instruction_table:
        if (opcode & instr.in_bit_mask) == instr.in_value_to_match:
            return instr.in_format_str.format(*[expr(opcode) for expr in instr.in_args])
            break
    else:
        raise ValueError(f"instruction not found in instruction table")
